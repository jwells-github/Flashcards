{"version":3,"sources":["LoginForm.js","serverFetches.js","SignUpForm.js","EntranceForm.js","InputSuggestion.js","DeckNameForm.js","FlashcardForm.js","ScreenOverlay.js","DeckDetailView.js","Flashcard.js","PlayView.js","DeckSortOptions.js","DeckList.js","FlashcardMenu.js","App.js","reportWebVitals.js","index.js"],"names":["LoginForm","props","state","loginUsername","loginPassword","handleChange","bind","login","event","this","setState","target","name","value","username","password","preventDefault","fetch","method","withCredentials","credentials","headers","body","JSON","stringify","then","response","json","handleResponse","className","onSubmit","htmlFor","type","autoFocus","onChange","Component","SignUpForm","signUpUsername","signUpPassword","signUp","mode","cache","redirect","referrerPolicy","EntranceForm","showLoginForm","formError","bool","loggedIn","setLoginStatus","onClick","displayLoginForm","getForm","setGuestStatus","InputSuggestion","filteredData","selectedSuggestion","displaySuggestions","updateSuggestions","useSuggestion","handleSuggestionInput","hideSuggestions","hideSuggestionsTimer","clearTimeout","length","downKey","key","upKey","enterKey","maxSuggestions","prevState","dataArray","filter","data","match","RegExp","sort","updateInputValue","suggestion","setTimeout","fieldName","onFocus","onBlur","onKeyDown","InputValue","autoComplete","slice","map","item","index","id","DeckNameForm","cardDeck","undefined","displayMergeWarning","displayCurrentNameWarning","errorEditingDeck","updateCardDeck","handleSubmit","hideOverlay","editDeckName","decks","includes","oldDeckName","newDeckName","inGuestMode","requestEditDeck","success","currentTarget","getFormWarning","getSubmissionError","FlashcardForm","cardFront","cardBack","prevProps","returnCard","ScreenOverlay","displayOverlay","onMouseDown","children","DeckDetailView","searchFilter","cardToEdit","displayEditCardForm","displayEditDeckNameForm","displayCreateCardForm","deleteCard","editCard","hideForm","window","history","pushState","document","title","onpopstate","exitView","card","cardID","confirm","_id","cardId","handleDeleteResponse","removeFlashcard","alert","message","requestEditCard","handleEditResponse","mockResponse","editFlashcard","showEditForm","isDisplayingAllDecks","cards","playDeck","placeholder","Date","dateCreated","toLocaleDateString","deck","deckName","createFlashcard","Flashcard","showCardReverse","actionTaken","dragStartX","draggingCard","initialCardCentre","commitedToDragging","cardFlipped","flipCard","handleCardResult","dragCard","stopDragging","FlashCardRef","React","createRef","removeEventListener","answeredCorrectly","screenX","getBoundingClientRect","x","offsetWidth","dragTimer","addEventListener","currentCardCentre","current","translateX","mouseX","translateStyle","flashCardInnerClass","ref","style","transform","PlayView","cardsInPlay","getShuffledCards","cardsToBeReplayed","positionInCards","displayEndDialogue","correctGuesses","incorrectGuesses","mouseY","cardResult","handleEndOfCards","resetPlayView","updateMousePosition","shuffledCards","currentPosition","randomPosition","Math","floor","random","currentCard","finalCard","screenY","answerAccuracy","round","onMouseMove","DeckSortOptions","sortOptions","active","updateSortPreference","sortDecks","applySortPreference","sortPreferences","forEach","option","sortedDecks","returnDecks","find","p","a","b","localeCompare","count","defaultValue","opt","label","sortOption","DeckList","displayCardForm","hideFlashcardForm","showFlashcardForm","disabled","playAllCards","enterDeckDetialViewAllCards","updateDecks","enterDeckDetailView","FlashcardMenu","flashcards","playMode","inDeckDetailView","deckSelected","selectedCards","allCardsSelected","exitDeckDetailView","exitPlayView","getDeckNames","deckNames","Set","numberOfCardsInDeck","push","currentName","newName","editedFlashcards","removedCard","filteredFlashcards","selectDeck","allCards","AllCardsindex","findIndex","selectedCardsIndex","requestCreateFlashcard","addFlashcard","String","now","selectionInProgress","showBackButton","hideBackButton","App","loading","guestMode","displayBackButton","getBody","back","historyBack","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4aa19143.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport { requestLogin } from './serverFetches';\r\n\r\nclass LoginForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            loginUsername: '',\r\n            loginPassword: '',\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.login = this.login.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    login(event){\r\n        event.preventDefault();\r\n        if(this.state.loginUsername === '' || this.state.loginPassword === '') return;\r\n        requestLogin(this.state.loginUsername, this.state.loginPassword)\r\n          .then(response => this.props.handleResponse(response));\r\n      }\r\n\r\n      render(){\r\n          return(\r\n            <div className=\"loginForm\">\r\n              <form onSubmit={this.login}>\r\n                <div className=\"formField\">\r\n                  <label htmlFor=\"loginUsername\">Username:</label>\r\n                  <input name=\"loginUsername\"type=\"text\" autoFocus  onChange={this.handleChange}/>\r\n                </div>\r\n                <div className=\"formField\">\r\n                  <label htmlFor=\"loginPassword\">Password:</label>\r\n                  <input name=\"loginPassword\" type=\"password\" onChange={this.handleChange}/>\r\n                </div>\r\n                <button type=\"submit\">Log in</button>\r\n              </form>\r\n            </div>\r\n          )\r\n      }\r\n}\r\n\r\nexport default LoginForm;","function requestLogin(username, password){\r\n    return fetch(\"/login\",{\r\n        method: 'POST',\r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers:{\r\n          'Accept': 'application/json',\r\n          'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({username: username, password: password}) \r\n      }).then(response => response.json())\r\n}\r\n\r\nfunction requestSignup(username, password){\r\n    return fetch(\"/signup\",{\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        cache: 'no-cache',\r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers:{\r\n          'Accept': 'application/json',\r\n          'Content-Type':'application/json'\r\n        },\r\n        redirect: 'follow',\r\n        referrerPolicy: 'no-referrer',\r\n        body: JSON.stringify({username: username, password: password}) \r\n      }).then(response => response.json())\r\n}\r\n\r\nfunction requestUser(){\r\n    return fetch('/user',{\r\n        withCredentials: true,\r\n        credentials: 'include'\r\n    }).then(response => response.json())\r\n}\r\n\r\nfunction requestFlashcards(){\r\n    return fetch('/flashcards/get',{\r\n        withCredentials: true,\r\n        credentials: 'include'\r\n      }).then(response => response.json())\r\n}\r\n\r\nfunction requestCreateFlashcard(cardFront, cardBack, cardDeck){\r\n    return fetch(\"/flashcards/create\",{\r\n        method: 'POST',   \r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({cardFront: cardFront, cardBack: cardBack, cardDeck: cardDeck}) \r\n    }).then(response => response.json())\r\n}\r\n\r\nfunction requestDeleteCard(cardID){\r\n    return fetch(\"/flashcards/delete\",{\r\n        method: 'POST',\r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({cardId: cardID})\r\n    }).then(response => response.json())\r\n}\r\n\r\nfunction requestEditCard(cardID, cardFront, cardBack, cardDeck){\r\n    return fetch(\"/flashcards/edit\",{\r\n        method: 'POST',\r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers:{\r\n          'Accept': 'application/json',\r\n          'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            cardId: cardID,\r\n            cardFront: cardFront,\r\n            cardBack: cardBack,\r\n            cardDeck: cardDeck    \r\n        })\r\n    }).then(response => response.json())\r\n}\r\n\r\nfunction requestEditDeck(oldDeckName, newDeckName){\r\n    return fetch(\"/deck/edit\",{\r\n        method: 'POST',   \r\n        withCredentials: true,\r\n        credentials: 'include',\r\n        headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type':'application/json'\r\n        },\r\n        body: JSON.stringify({oldDeckName: oldDeckName, newDeckName: newDeckName }) \r\n        }).then(response => response.json())\r\n}\r\nexport {requestUser, requestDeleteCard, \r\n        requestEditCard, requestEditDeck,\r\n        requestFlashcards, requestCreateFlashcard, \r\n        requestLogin, requestSignup}\r\n","import React, {Component} from 'react'\r\nimport { requestSignup } from './serverFetches';\r\n\r\nclass SignUpForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            signUpUsername: '',\r\n            signUpPassword: '',\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.signUp = this.signUp.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n      this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    signUp(event){\r\n        event.preventDefault();\r\n        if(this.state.signUpUsername === '' || this.state.signUpPassword === '') return;\r\n        requestSignup(this.state.signUpUsername,this.state.signUpPassword)\r\n          .then(response => this.props.handleResponse(response));\r\n      }\r\n\r\n      render(){\r\n          return(\r\n            <div className=\"signUpForm\">\r\n              <form onSubmit={this.signUp}>\r\n                <div className=\"formField\">\r\n                  <label htmlFor=\"signUpUsername\">Username:</label>\r\n                  <input name=\"signUpUsername\"type=\"text\" autoFocus onChange={this.handleChange}/>\r\n                </div>\r\n                <div className=\"formField\">\r\n                  <label htmlFor=\"signUpPassword\">Password:</label>\r\n                  <input name=\"signUpPassword\" type=\"password\" onChange={this.handleChange}/>\r\n                </div>\r\n                <button type=\"submit\">Sign up</button>\r\n              </form>\r\n            </div>\r\n          )\r\n      }\r\n}\r\n\r\nexport default SignUpForm;","import React, {Component} from 'react'\r\nimport LoginForm from './LoginForm';\r\nimport SignUpForm from './SignUpForm';\r\n\r\nclass EntranceForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            showLoginForm: true,\r\n            formError: '',\r\n        };\r\n        this.handleResponse = this.handleResponse.bind(this);\r\n\r\n    }\r\n\r\n    displayLoginForm(bool){\r\n      if(bool !== this.state.showLoginForm){\r\n        this.setState({showLoginForm: bool, formError: ''});\r\n      }\r\n    }\r\n\r\n    handleResponse(response){\r\n        if(response.formError){\r\n            this.setState({formError: response.formError});\r\n        }\r\n        else{\r\n          this.setState({formError : ''})\r\n        }\r\n        if(response.loggedIn){\r\n            this.props.setLoginStatus(response.loggedIn);\r\n        }   \r\n    }\r\n\r\n    getForm(){\r\n      if(this.state.showLoginForm){\r\n        return(\r\n        <LoginForm handleResponse={this.handleResponse}/>\r\n        )\r\n      }\r\n      else{\r\n        return(\r\n          <SignUpForm handleResponse={this.handleResponse}/>\r\n        )\r\n      }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n          <div>\r\n            <div className=\"entranceForm\">\r\n              <div className=\"selectionButtons\">\r\n                  <h2\r\n                    className={this.state.showLoginForm ? \"\" : \"faded\"}\r\n                    onClick={() => this.displayLoginForm(true)}>Log in</h2>\r\n                  <h2 \r\n                  className={this.state.showLoginForm ? \"faded\" : \"\"}\r\n                  onClick={() => this.displayLoginForm(false)}>Sign up</h2>\r\n              </div>\r\n              {this.getForm()}\r\n              <p>{this.state.formError}</p>\r\n            </div>\r\n            <div className='guestForm'>\r\n              <button onClick={() => this.props.setGuestStatus(true)}>Demo the App in guest mode</button>\r\n              <span>All data will be lost when session ends</span>\r\n            </div>\r\n          </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default EntranceForm;","import React, {Component} from 'react'\r\n\r\n\r\nclass InputSuggestion extends Component {\r\n    static maxSuggestions = 5;\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            filteredData: [],\r\n            selectedSuggestion: -1, // -1 indicating no suggestion is selected\r\n            displaySuggestions: true,\r\n        };\r\n        this.updateSuggestions = this.updateSuggestions.bind(this);\r\n        this.useSuggestion = this.useSuggestion.bind(this);\r\n        this.handleSuggestionInput = this.handleSuggestionInput.bind(this);\r\n        this.hideSuggestions = this.hideSuggestions.bind(this);\r\n        this.displaySuggestions = this.displaySuggestions.bind(this);\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        if(this.hideSuggestionsTimer){\r\n            clearTimeout(this.hideSuggestionsTimer);\r\n        }\r\n    }\r\n    handleSuggestionInput(event){\r\n        if(this.state.filteredData.length <= 0){\r\n            return;\r\n        }\r\n        let downKey = event.key === \"Down\" || event.key === \"ArrowDown\"\r\n        let upKey = event.key === \"Up\" || event.key === \"ArrowUp\"\r\n        let enterKey = event.key === \"Enter\";\r\n        if(downKey){\r\n            if(InputSuggestion.maxSuggestions <= this.state.selectedSuggestion ){\r\n                return;\r\n            }\r\n            this.setState(prevState =>({\r\n                selectedSuggestion: prevState.selectedSuggestion +1\r\n            }));\r\n        }\r\n        if(upKey){\r\n            if(this.state.selectedSuggestion <= -1){\r\n                return;\r\n            }\r\n            this.setState(prevState =>({\r\n                selectedSuggestion: prevState.selectedSuggestion -1\r\n            }));\r\n        }\r\n        if(enterKey){\r\n            if(this.state.selectedSuggestion === -1 ){\r\n                return;\r\n            }\r\n            event.preventDefault();\r\n            this.useSuggestion(this.state.filteredData[this.state.selectedSuggestion])\r\n        }\r\n    }\r\n\r\n    updateSuggestions(event){\r\n        this.setState({ \r\n            selectedSuggestion: -1,\r\n            filteredData : this.props.dataArray.filter(data => data.match(new RegExp(\"^\"+event.target.value,\"i\"))).sort()\r\n         });\r\n         this.props.updateInputValue(event.target.value);\r\n    }\r\n\r\n    useSuggestion(suggestion){\r\n        this.setState({\r\n            selectedSuggestion: 0,\r\n            filteredData: []\r\n        })\r\n        this.props.updateInputValue(suggestion)\r\n    }\r\n    hideSuggestions(){\r\n       this.hideSuggestionsTimer = setTimeout(() => {this.setState({displaySuggestions: false})}, 300)\r\n    }\r\n    displaySuggestions(){\r\n        this.setState({displaySuggestions: true})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div className=\"formField inputSuggestionField\">\r\n            <label htmlFor={this.props.fieldName}>{this.props.fieldName}:</label>\r\n            <input onFocus={this.displaySuggestions} onBlur={this.hideSuggestions} onKeyDown={this.handleSuggestionInput}\r\n                name={this.props.fieldName} type=\"text\" \r\n                value={this.props.InputValue} onChange={this.updateSuggestions} \r\n                autoComplete=\"off\"/>\r\n            <div className={this.state.displaySuggestions? \"\" : \"hide\"}>\r\n                <div className={this.state.filteredData.length > 0 ? \"formSuggestion\" : \"\"}>\r\n                    {this.state.filteredData.slice(0,InputSuggestion.maxSuggestions).map((item, index) => \r\n                        <span\r\n                            key={index}\r\n                            id={this.state.selectedSuggestion === index  ? \"InputSuggestion-Selected\" : \"\"}  \r\n                            value={item} \r\n                            onClick={() => this.useSuggestion(item)}>\r\n                                {item}\r\n                        </span>)}\r\n                </div>\r\n            </div>\r\n        </div>  \r\n        )\r\n      }\r\n}\r\n\r\nexport default InputSuggestion;","import React, {Component} from 'react'\r\nimport InputSuggestion from './InputSuggestion';\r\nimport { requestEditDeck } from './serverFetches';\r\n\r\nclass DeckNameForm extends Component {\r\n        constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cardDeck: this.props.cardDeck === undefined ? \"\" :  this.props.cardDeck,\r\n            displayMergeWarning: false,\r\n            displayCurrentNameWarning: false,\r\n            errorEditingDeck: false,\r\n        };\r\n        this.updateCardDeck = this.updateCardDeck.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.hideOverlay = this.hideOverlay.bind(this);\r\n        this.editDeckName = this.editDeckName.bind(this);\r\n    }\r\n    \r\n    updateCardDeck(value){\r\n        this.setState({cardDeck:value, displayMergeWarning: false, displayCurrentNameWarning: false})\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        if(this.state.cardDeck === '') return;\r\n        if(this.state.cardDeck === this.props.cardDeck){\r\n            this.setState({displayCurrentNameWarning: true})\r\n        }\r\n        // Warn the user that the deckname is in use\r\n        else if(this.props.decks.includes(this.state.cardDeck) && !this.state.displayMergeWarning){\r\n            this.setState({displayMergeWarning: true})\r\n        }\r\n        else{\r\n            this.editDeckName(this.props.cardDeck, this.state.cardDeck)\r\n        }\r\n    }\r\n\r\n    editDeckName(oldDeckName, newDeckName){\r\n        this.setState({errorEditingDeck: false}, () =>{\r\n            if(this.props.inGuestMode === false){\r\n                requestEditDeck(oldDeckName, newDeckName).then(response => {\r\n                    if(response.success){   \r\n                        this.props.editDeckName(oldDeckName, newDeckName)\r\n                        this.props.hideOverlay()\r\n                    }\r\n                    else{\r\n                        this.setState({errorEditingDeck: true})\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                this.props.editDeckName(oldDeckName,newDeckName)\r\n                this.props.hideOverlay()\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    hideOverlay(event){\r\n        if(event.target === event.currentTarget){\r\n            this.props.hideOverlay()\r\n            this.setState({\r\n                cardDeck: this.props.cardDeck,\r\n                displayMergeWarning: false,\r\n                displayCurrentNameWarning: false\r\n            })\r\n        }\r\n    }\r\n\r\n    getFormWarning(){\r\n        if(this.state.displayMergeWarning){\r\n            return  <div className=\"formWarning\">\r\n                        <h1>Warning:</h1>\r\n                        <span>A deck with that name already exists, this deck will be merged with the existing deck</span>\r\n                        <span>Submit to procceed</span>\r\n                    </div>\r\n        }\r\n        else if(this.state.displayCurrentNameWarning){\r\n            return  <div className=\"formWarning\">\r\n                        <h1>Warning:</h1>\r\n                        <span>This deck already has that name</span>\r\n                    </div>\r\n        }\r\n    }\r\n\r\n    getSubmissionError(){\r\n        if(this.state.errorEditingDeck){\r\n            return <div>\r\n                        <h1>Warning:</h1>\r\n                        <span>There was an error processing your request, please try again</span>\r\n                   </div>\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"flashcardForm\">\r\n                <button onClick={this.props.hideOverlay}>hide</button>  \r\n                <form onSubmit={this.handleSubmit}>\r\n                    <InputSuggestion\r\n                        InputValue={this.state.cardDeck}\r\n                        fieldName ={\"Deck\"}\r\n                        dataArray={this.props.decks}\r\n                        updateInputValue = {this.updateCardDeck}\r\n                    />                 \r\n                    <button className=\"flashcardSubmitButton\" type=\"submit\">Submit Card</button>\r\n                    {this.getFormWarning()}\r\n                    {this.getSubmissionError()}\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeckNameForm;","import React, {Component} from 'react'\r\nimport InputSuggestion from './InputSuggestion';\r\n\r\nclass FlashcardForm extends Component {\r\n        constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            cardFront: this.props.cardFront === undefined ? \"\" :  this.props.cardFront,\r\n            cardBack: this.props.cardBack === undefined ? \"\" :  this.props.cardBack,\r\n            cardDeck: this.props.cardDeck === undefined ? \"\" :  this.props.cardDeck,\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.updateCardDeck = this.updateCardDeck.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if(this.props.cardFront !== prevProps.cardFront){\r\n            this.setState({cardFront: this.props.cardFront === undefined ? '' : this.props.cardFront})\r\n        }\r\n        if(this.props.cardBack !== prevProps.cardBack){\r\n            this.setState({cardBack: this.props.cardBack === undefined ? '' : this.props.cardBack})\r\n        }\r\n        if(this.props.cardDeck !== prevProps.cardDeck){\r\n            this.setState({cardDeck: this.props.cardDeck === undefined ? '' : this.props.cardDeck})\r\n        }\r\n      }\r\n    \r\n    \r\n    handleChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n    updateCardDeck(value){\r\n        this.setState({cardDeck:value})\r\n    }\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n        if(this.state.cardFront === '' || this.state.cardBack === '' || this.state.cardDeck === '') return;\r\n        this.props.returnCard(this.state.cardFront,this.state.cardBack,this.state.cardDeck)\r\n        this.setState({cardFront: '', cardBack: '', cardDeck: ''})\r\n        this.props.hideOverlay()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form className=\"flashcardForm\" onSubmit={this.handleSubmit}>\r\n                <button className='hideFormButton' onClick={this.props.hideOverlay}>X</button>\r\n                <div className=\"formField\">\r\n                    <label htmlFor=\"cardFront\">Front Text:</label>\r\n                    <textarea autoFocus name=\"cardFront\" type=\"text\" value={this.state.cardFront} onChange={this.handleChange}/>\r\n                </div>\r\n                <div className=\"formField\">\r\n                    <label htmlFor=\"cardBack\">Back Text:</label>\r\n                    <textarea name=\"cardBack\" type=\"text\" value={this.state.cardBack} onChange={this.handleChange}/>\r\n                </div>\r\n                <InputSuggestion\r\n                    InputValue={this.state.cardDeck}\r\n                    fieldName ={\"Deck\"}\r\n                    dataArray={this.props.decks}\r\n                    updateInputValue = {this.updateCardDeck}\r\n                />                 \r\n                <button className=\"flashcardSubmitButton\" type=\"submit\">Submit Card</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FlashcardForm;","import React, {Component} from 'react'\r\nimport './Styles/ScreenOverlay.css'\r\nclass ScreenOverlay extends Component {\r\n        constructor(props){\r\n        super(props);\r\n        this.hideOverlay = this.hideOverlay.bind(this);\r\n    }\r\n    \r\n    hideOverlay(event){\r\n        if(event.target === event.currentTarget){\r\n            this.props.hideOverlay()\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div  className={this.props.displayOverlay ? \"screenOverlay\" : \"hide\"} onMouseDown={this.hideOverlay}>\r\n            {this.props.displayOverlay ? this.props.children : ''}\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ScreenOverlay;","import React, {Component} from 'react'\r\nimport './Styles/DeckDetailView.css';\r\nimport DeckNameForm from './DeckNameForm';\r\nimport FlashcardForm from './FlashcardForm';\r\nimport ScreenOverlay from './ScreenOverlay';\r\nimport { requestDeleteCard, requestEditCard } from './serverFetches';\r\n\r\n\r\nclass DeckDetailView extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            searchFilter: '',\r\n            cardToEdit: {},\r\n            displayEditCardForm: false,\r\n            displayEditDeckNameForm: false,\r\n            displayCreateCardForm: false,\r\n        };\r\n        this.deleteCard = this.deleteCard.bind(this);\r\n        this.editCard =  this.editCard.bind(this);  \r\n        this.displayEditCardForm = this.displayEditCardForm.bind(this);\r\n        this.displayEditDeckNameForm = this.displayEditDeckNameForm.bind(this);\r\n        this.displayCreateCardForm = this.displayCreateCardForm.bind(this);\r\n        this.hideForm = this.hideForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        // Take user back to FlashcardMenu on backpress\r\n        window.history.pushState({}, document.title)\r\n        window.onpopstate = this.props.exitView;\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    deleteCard(card){\r\n        if(window.confirm(\"Are you sure you want to delete this card?\\r\\n\" + card.cardFront + \"\\r\\n\" + card.cardBack)){\r\n            if(this.props.inGuestMode === false){\r\n                requestDeleteCard(card._id).then(response => this.handleDeleteResponse(response, card));\r\n            }\r\n            else{\r\n               let mockResponse = {success:true} \r\n               this.handleDeleteResponse(mockResponse, card) \r\n            }\r\n        }\r\n    }\r\n\r\n    handleDeleteResponse(response, card){\r\n        if(response.success){\r\n            this.props.removeFlashcard(card)\r\n        }\r\n        else{\r\n            alert(response.message);\r\n        }\r\n    }   \r\n\r\n    editCard(cardFront, cardBack, cardDeck){\r\n        if(this.props.inGuestMode === false){\r\n            requestEditCard(this.state.cardToEdit._id, cardFront, cardBack, cardDeck)\r\n                .then(response =>\r\n                    this.handleEditResponse(response, this.state.cardToEdit._id));\r\n        }\r\n        else{\r\n            let mockResponse = {\r\n                success:true, \r\n                card:{\r\n                    _id: this.state.cardToEdit._id,\r\n                    cardFront:cardFront,\r\n                    cardBack:cardBack,\r\n                    cardDeck: cardDeck\r\n                }\r\n            }; \r\n            this.handleEditResponse(mockResponse,this.state.cardToEdit._id) \r\n        }\r\n        \r\n    }\r\n\r\n    handleEditResponse(response, cardId){\r\n        if(response.success){\r\n            this.props.editFlashcard(cardId,response.card)\r\n            this.setState({\r\n                showEditForm: false,\r\n                cardToEdit: {},\r\n            })\r\n        }\r\n        else{\r\n            alert(response.message);\r\n        }\r\n    }\r\n    displayEditCardForm(card){\r\n        this.setState({\r\n            displayEditCardForm: true,\r\n            cardToEdit: card,\r\n        })\r\n    }\r\n    displayEditDeckNameForm(){\r\n        this.setState({displayEditDeckNameForm: true});\r\n    }\r\n    displayCreateCardForm(){\r\n        this.setState({displayCreateCardForm: true})\r\n    }\r\n    hideForm(){\r\n        this.setState({\r\n            displayEditCardForm:false,\r\n            displayEditDeckNameForm:false,\r\n            displayCreateCardForm: false,\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div className='deckView'>\r\n            <h1>{this.props.isDisplayingAllDecks ? \"All Decks\" :this.props.cards[0].cardDeck}</h1>\r\n            <div className=\"deckViewOptions\">\r\n                <button onClick={this.props.playDeck}>Play Deck</button>\r\n                <button onClick={this.displayCreateCardForm}>Add a card</button>\r\n                <input className=\"largeSearchbar\" placeholder=\"Search...\" onChange={this.handleChange} name=\"searchFilter\" type=\"text\"></input>\r\n                <button onClick={this.displayEditDeckNameForm}>Rename Deck</button>\r\n                <button>Delete Deck</button>\r\n            </div>\r\n            <table className=\"deckViewTable\">\r\n                <thead> \r\n                    <tr>    \r\n                        <th className=\"colCardFront\">Card Front</th>\r\n                        <th className=\"colCardBack\">Card Back</th>\r\n                        <th className={this.props.isDisplayingAllDecks ? 'colCardDeck' :'hide'}>Deck</th>\r\n                        <th className='colCardDate'>Created Date</th>\r\n                        <th className='colCardAction'></th>\r\n                        <th className='colCardAction'></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.props.cards.filter(card =>\r\n                        card.cardFront.match(new RegExp(this.state.searchFilter,\"g\")) ||\r\n                        card.cardBack.match(new RegExp(this.state.searchFilter,\"g\")))\r\n                        .map((card,index) =>\r\n                            <tr key={index}>\r\n                                <td className='colCardFront'>{card.cardFront}</td>\r\n                                <td className='colCardBack'>{card.cardBack}</td>\r\n                                <td className={this.props.isDisplayingAllDecks ? 'colCardDeck' :'hide'} title={card.cardDeck}>{card.cardDeck}</td>\r\n                                <td className='colCardDate'>{new Date(card.dateCreated).toLocaleDateString('en-GB')}</td>\r\n                                <td className='colCardAction tableAction'><span onClick={()=>this.displayEditCardForm(card)}>Edit</span></td>\r\n                                <td className='colCardAction tableAction'><span onClick={()=>this.deleteCard(card)}>Delete</span></td>\r\n                            </tr>\r\n                    )}  \r\n                </tbody>\r\n            </table>\r\n            {/* Overlay for editing a card */}\r\n            <ScreenOverlay hideOverlay = {this.hideForm} displayOverlay = {this.state.displayEditCardForm}>\r\n                <FlashcardForm\r\n                    hideOverlay={this.hideForm}\r\n                    decks={this.props.decks.map(deck => deck.deckName)} \r\n                    returnCard={this.editCard}\r\n                    cardFront={this.state.cardToEdit.cardFront}\r\n                    cardBack={this.state.cardToEdit.cardBack}\r\n                    cardDeck={this.state.cardToEdit.cardDeck}/>\r\n            </ScreenOverlay>\r\n            {/* Overlay for editing the deckname of all cards */}\r\n            <ScreenOverlay hideOverlay = {this.hideForm} displayOverlay = {this.state.displayEditDeckNameForm}>\r\n                <DeckNameForm\r\n                    hideOverlay={this.hideForm}\r\n                    decks={this.props.decks.map(deck => deck.deckName)} \r\n                    editDeckName={this.props.editDeckName}\r\n                    cardDeck={this.props.cards[0].cardDeck}\r\n                    inGuestMode={this.props.inGuestMode}\r\n                />\r\n            </ScreenOverlay>\r\n            {/* Overlay for creating a card*/}\r\n            <ScreenOverlay hideOverlay={this.hideForm} displayOverlay = {this.state.displayCreateCardForm}>\r\n                <FlashcardForm\r\n                        hideOverlay={this.hideForm}\r\n                        decks={this.props.decks.map(deck => deck.deckName)} \r\n                        returnCard={this.props.createFlashcard}\r\n                        cardDeck={this.props.cards[0].cardDeck}/>    \r\n            </ScreenOverlay>               \r\n        </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default DeckDetailView;","import React, {Component} from 'react'\r\nimport './Styles/Flashcard.css';\r\nclass Flashcard extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {  \r\n            showCardReverse: false,\r\n            actionTaken: false,\r\n            dragStartX: 0,\r\n            draggingCard: false,\r\n            initialCardCentre: 0,\r\n            commitedToDragging: false,\r\n            cardFlipped: false,\r\n        };\r\n        this.flipCard = this.flipCard.bind(this);\r\n        this.handleCardResult = this.handleCardResult.bind(this);\r\n        this.dragCard = this.dragCard.bind(this);\r\n        this.stopDragging = this.stopDragging.bind(this);\r\n        this.FlashCardRef = React.createRef();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        document.removeEventListener(\"mouseup\", this.stopDragging);\r\n    }\r\n\r\n    flipCard(){\r\n        if(this.state.commitedToDragging){\r\n            this.setState({commitedToDragging : false})\r\n            return;\r\n        }\r\n        this.setState(prevState => ({\r\n            showCardReverse: !prevState.showCardReverse,\r\n            cardFlipped: !prevState.cardFlipped,\r\n            actionTaken: true\r\n        }));\r\n    }   \r\n    \r\n    handleCardResult(answeredCorrectly){\r\n        if(this.state.actionTaken){\r\n            this.setState({showCardReverse: false, actionTaken: false, cardFlipped: false})\r\n            this.props.handleCardResult(answeredCorrectly)\r\n        }   \r\n    }\r\n\r\n    dragCard(event){\r\n        if(!this.state.actionTaken){\r\n            return\r\n        }\r\n        this.setState({\r\n            dragStartX : event.screenX, \r\n            draggingCard: true, \r\n            initialCardCentre : event.currentTarget.getBoundingClientRect().x + (event.currentTarget.offsetWidth / 2)\r\n        })\r\n        this.dragTimer = setTimeout(() =>{\r\n            if(this.state.draggingCard){\r\n                this.setState({commitedToDragging: true});\r\n            }\r\n        }, 150 )\r\n        document.addEventListener(\"mouseup\", this.stopDragging);\r\n    }\r\n\r\n    stopDragging(){\r\n        clearTimeout(this.dragTimer);\r\n        let initialCardCentre = this.state.initialCardCentre;\r\n        let currentCardCentre = this.FlashCardRef.current.getBoundingClientRect().x + (this.FlashCardRef.current.offsetWidth / 2);\r\n        this.setState({dragStartX : 0, draggingCard: false})\r\n        if(!this.state.commitedToDragging){\r\n            return;\r\n        }\r\n        // Swiping the card left \r\n        if(currentCardCentre <= initialCardCentre - (initialCardCentre / 3)){\r\n            this.handleCardResult(false)\r\n        }\r\n        // Swiping the card right\r\n        if(currentCardCentre >= initialCardCentre + (initialCardCentre / 3)){\r\n            this.handleCardResult(true)\r\n        }\r\n        document.removeEventListener(\"mouseup\", this.stopDragging);\r\n        // prevent onClick from being fired if the cursor is released over the cover\r\n        setTimeout(() =>{\r\n            this.setState({commitedToDragging : false})\r\n        }, 100);\r\n    }\r\n    \r\n    render(){\r\n        let translateX = 0;\r\n        if(this.state.draggingCard){\r\n            translateX = this.props.mouseX - this.state.dragStartX\r\n        }\r\n        let translateStyle = \"translateX(\" + translateX + \"px)\"\r\n        let flashCardInnerClass = \"flashcardInner \"\r\n        if(this.state.cardFlipped){\r\n            flashCardInnerClass += \"flashcardInnerFlip\"\r\n        }\r\n        return(\r\n            <div className=\"flashcardView\">\r\n                <div className=\"maskLevel\">\r\n                    <div className=\"mask\"></div>\r\n                        <div className=\"cardContainer\">\r\n                            <div className=\"flashcard\" ref={this.FlashCardRef}  style={{transform: translateStyle}} onMouseDown={this.dragCard} onClick={this.state.commitedToDragging ? null : this.flipCard}>\r\n                                <div className={flashCardInnerClass}>\r\n                                    <div className=\"cardFront\" >\r\n                                        <span className=\"cardInfo\">Front</span>\r\n                                        <span className=\"cardText\">{this.props.card.cardFront}</span>\r\n                                        <span className=\"cardInfo\">Click to reveal back</span>\r\n                                    </div>\r\n                                    <div className=\"cardReverse\">\r\n                                        <span className=\"cardInfo\">Back</span>\r\n                                        <span className=\"cardText\">{this.props.card.cardBack}</span>\r\n                                        <span className=\"cardInfo\">Click to show front</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"flashcardButtons\">\r\n                                <div className={this.state.actionTaken ? \"\" : \"buttonInactive\"}>\r\n                                        <button className=\"buttonIncorrect\" onClick={() => this.handleCardResult(false)}>Incorrect</button>\r\n                                </div>\r\n                                <div className={this.state.actionTaken ? \"\" : \" buttonInactive\"}>\r\n                                    <button className=\"buttonCorrect\" onClick={() => this.handleCardResult(true)}>Correct</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    <div className=\"mask\"></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Flashcard;","import React, {Component} from 'react'\r\nimport Flashcard from './Flashcard';\r\n\r\nclass PlayView extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {  \r\n            cardsInPlay: this.getShuffledCards(this.props.cards),\r\n            cardsToBeReplayed: [],\r\n            positionInCards: 0,\r\n            showCardReverse: false,\r\n            actionTaken: false,\r\n            displayEndDialogue: false,\r\n            correctGuesses: 0,\r\n            incorrectGuesses: 0,\r\n            mouseX: 0,\r\n            mouseY: 0\r\n        };\r\n        this.cardResult = this.handleCardResult.bind(this);\r\n        this.handleEndOfCards = this.handleEndOfCards.bind(this);\r\n        this.resetPlayView = this.resetPlayView.bind(this);\r\n        this.handleCardResult = this.handleCardResult.bind(this);\r\n        this.updateMousePosition = this.updateMousePosition.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        window.history.pushState({}, document.title)\r\n        window.onpopstate = this.props.exitView;\r\n    }\r\n    \r\n    getShuffledCards(cards){\r\n        let shuffledCards = cards\r\n        let currentPosition = shuffledCards.length; \r\n        while(currentPosition !== 0){\r\n            let randomPosition = Math.floor(Math.random() * currentPosition);\r\n            currentPosition -= 1;\r\n            let currentCard = shuffledCards[currentPosition]\r\n            // Swap the position of the cards\r\n            shuffledCards[currentPosition] = shuffledCards[randomPosition];\r\n            shuffledCards[randomPosition] = currentCard;\r\n        }\r\n        return shuffledCards;\r\n    }\r\n\r\n    handleEndOfCards(){\r\n        if(this.state.cardsToBeReplayed.length < 1){\r\n            this.setState({displayEndDialogue: true})\r\n        }\r\n        else{\r\n            this.setState({\r\n                cardsInPlay: this.getShuffledCards(this.state.cardsToBeReplayed),\r\n                cardsToBeReplayed: [],\r\n                positionInCards: 0,\r\n                showCardReverse: false,\r\n                actionTaken: false,\r\n            })\r\n        }\r\n    }\r\n\r\n    handleCardResult(answeredCorrectly){\r\n        let finalCard = this.state.positionInCards === this.state.cardsInPlay.length -1;\r\n        let cardsToBeReplayed = answeredCorrectly ? this.state.cardsToBeReplayed : [...this.state.cardsToBeReplayed, this.state.cardsInPlay[this.state.positionInCards]];\r\n        this.setState(prevState => ({\r\n            positionInCards: prevState.positionInCards += finalCard ? 0 : 1,\r\n            showCardReverse: false,\r\n            actionTaken: false,\r\n            cardsToBeReplayed: cardsToBeReplayed,\r\n            correctGuesses: prevState.correctGuesses += answeredCorrectly? 1 : 0,\r\n            incorrectGuesses: prevState.incorrectGuesses += answeredCorrectly? 0 : 1,\r\n        }),() =>{\r\n            if(finalCard){\r\n                this.handleEndOfCards()\r\n            }\r\n        })\r\n    }\r\n\r\n    resetPlayView(){\r\n        this.setState({\r\n            cardsInPlay: this.getShuffledCards(this.props.cards),\r\n            cardsToBeReplayed: [],\r\n            positionInCards: 0,\r\n            showCardReverse: false,\r\n            actionTaken: false,\r\n            displayEndDialogue: false,\r\n            correctGuesses: 0,\r\n            incorrectGuesses: 0,\r\n        })\r\n    }\r\n\r\n    updateMousePosition(event){\r\n        this.setState({mouseX : event.screenX, mouseY : event.screenY})\r\n    }\r\n    render(){\r\n        if(this.state.displayEndDialogue){\r\n            let answerAccuracy =  (this.state.correctGuesses / (this.state.correctGuesses + this.state.incorrectGuesses)) * 100\r\n            answerAccuracy = Math.round(answerAccuracy * 100) / 100 // Round to 2 decimal places\r\n            return(\r\n                <div className='endDialogue'>\r\n                    <h1>{answerAccuracy}% of answers were correct </h1>\r\n                    <button onClick={this.resetPlayView}>Replay</button>\r\n                    <button onClick={this.props.exitView}>Exit</button>\r\n                </div>\r\n            )\r\n        }\r\n        else{\r\n            let currentCard = this.state.cardsInPlay[this.state.positionInCards]\r\n            return(\r\n                <div onMouseMove={this.updateMousePosition} className=\"playView\">\r\n                    <h1>Playing cards from: <br/> {currentCard.cardDeck}</h1>\r\n                    <Flashcard \r\n                        card={currentCard}\r\n                        handleCardResult={this.handleCardResult}\r\n                        mouseX = {this.state.mouseX}/>\r\n                    <h2>{this.state.cardsInPlay.length - this.state.positionInCards + this.state.cardsToBeReplayed.length} Cards remaining</h2>\r\n                    <h2>{this.state.correctGuesses + this.state.incorrectGuesses} Cards Played</h2>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default PlayView;","import React, {Component} from 'react'\r\n\r\nclass DeckSortOptions extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            sortOptions: [\r\n                {name: \"Alphabetical\", active: false},\r\n                {name: \"Reverse alphabetical\", active: false},\r\n                {name: \"Number of cards (ascending)\", active: false},\r\n                {name: \"Number of cards (descending)\", active: true},\r\n            ],\r\n        };\r\n        this.updateSortPreference = this.updateSortPreference.bind(this);\r\n        this.sortDecks = this.sortDecks.bind(this);\r\n        this.applySortPreference = this.applySortPreference.bind(this)\r\n    }\r\n\r\n    componentDidUpdate(prevProps){\r\n        if(this.props.decks !== prevProps.decks){\r\n            this.applySortPreference()\r\n        }\r\n    }\r\n\r\n    updateSortPreference(event){    \r\n        let sortPreferences = this.state.sortOptions;\r\n        sortPreferences.forEach(option => {\r\n            if(option.name === event.target.value){\r\n                option.active = true;    \r\n            }\r\n            else{\r\n                option.active = false;\r\n            }\r\n        });\r\n        this.setState({sortOptions: sortPreferences}, \r\n            this.applySortPreference()\r\n        );\r\n    }\r\n    applySortPreference(){\r\n        let sortedDecks = this.sortDecks(this.props.decks);\r\n        this.props.returnDecks(sortedDecks)\r\n    }\r\n    \r\n    sortDecks(decks){\r\n        switch(this.state.sortOptions.find(p => p.active).name){\r\n            case \"Alphabetical\":\r\n                decks.sort((a,b) => a.deckName.localeCompare(b.deckName))\r\n                break;\r\n            case \"Reverse alphabetical\":\r\n                decks.sort((a,b) => b.deckName.localeCompare(a.deckName))\r\n                break;\r\n            case \"Number of cards (ascending)\":\r\n                decks.sort((a,b) => a.count - b.count)\r\n                break;\r\n            case \"Number of cards (descending)\":\r\n                decks.sort((a,b) => b.count - a.count)\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        return decks;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <select defaultValue={this.state.sortOptions.find(opt => opt.active).name} onChange={this.updateSortPreference}>\r\n            <optgroup label=\"Sort Method\"> \r\n                {this.state.sortOptions.map(sortOption => \r\n                    <option key={sortOption.name}  value={sortOption.name}>{sortOption.name}</option>)\r\n                }\r\n            </optgroup>\r\n        </select>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeckSortOptions;","import React, {Component} from 'react'\r\nimport DeckSortOptions from './DeckSortOptions';\r\nimport FlashcardForm from './FlashcardForm';\r\nimport ScreenOverlay from './ScreenOverlay';\r\n\r\nclass DeckList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            displayCardForm: false,\r\n            searchFilter: ''\r\n        };\r\n        this.hideFlashcardForm = this.hideFlashcardForm.bind(this);\r\n        this.showFlashcardForm = this.showFlashcardForm.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    hideFlashcardForm(){\r\n        this.setState({displayCardForm:false})\r\n    }\r\n    showFlashcardForm(){\r\n        this.setState({displayCardForm:true})\r\n    }\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"deckList\">\r\n                <ScreenOverlay hideOverlay={this.hideFlashcardForm} displayOverlay={this.state.displayCardForm}>\r\n                    <FlashcardForm\r\n                        hideOverlay={this.hideFlashcardForm}\r\n                        decks={this.props.decks.map(deck => deck.deckName)} \r\n                        returnCard={this.props.createFlashcard}\r\n                    />\r\n                </ScreenOverlay>\r\n                <div className=\"deckContainer\">\r\n                    <div className=\"decks\">\r\n                        <div className=\"deckOptions\">\r\n                            <button onClick={this.showFlashcardForm}>Add a flashcard</button>\r\n                            <button disabled={this.props.decks.length < 1} onClick={this.props.playAllCards}>Play All</button>\r\n                            <button disabled={this.props.decks.length < 1} onClick={this.props.enterDeckDetialViewAllCards}>View All</button>\r\n                            <input className=\"largeSearchbar\" aria-label=\"deckSearch\" placeholder=\"Search...\" onChange={this.handleChange} name=\"searchFilter\" type=\"text\"></input>\r\n                            <DeckSortOptions \r\n                                decks={this.props.decks}\r\n                                returnDecks={this.props.updateDecks}\r\n                            />\r\n                        </div>\r\n                        {this.props.decks.filter(deck => deck.deckName.match(new RegExp(this.state.searchFilter,\"g\"))).map((deck,index) =>\r\n                            <div className=\"deck\" key={index}>\r\n                                <h1>{deck.deckName}</h1>\r\n                                <span>{deck.count} {deck.count > 1 ? \"cards\" : \"card\"}</span>\r\n                                <div>\r\n                                    <button onClick={() => this.props.playDeck(deck.deckName)}>Play Deck</button>\r\n                                    <button onClick={() => this.props.enterDeckDetailView\r\n                            (deck.deckName)}>Edit Deck</button> \r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeckList; ","import React, {Component} from 'react'\r\nimport DeckDetailView from './DeckDetailView';\r\nimport PlayView from './PlayView';\r\nimport DeckList from './DeckList';\r\nimport { requestCreateFlashcard, requestFlashcards } from './serverFetches';\r\n\r\nclass FlashcardMenu extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            flashcards: [],\r\n            decks: [],\r\n            searchFilter: '',\r\n            playMode: false,\r\n            inDeckDetailView: false,\r\n            deckSelected: false,\r\n            selectedCards: [],\r\n            allCardsSelected: false,\r\n        };\r\n        this.createFlashcard = this.createFlashcard.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.updateCardDeck = this.updateCardDeck.bind(this);\r\n        this.removeFlashcard = this.removeFlashcard.bind(this);\r\n        this.editFlashcard = this.editFlashcard.bind(this);\r\n        this.exitDeckDetailView = this.exitDeckDetailView.bind(this);\r\n        this.exitPlayView = this.exitPlayView.bind(this);\r\n        this.playDeck = this.playDeck.bind(this);\r\n        this.playAllCards = this.playAllCards.bind(this);\r\n        this.enterDeckDetailView = this.enterDeckDetailView.bind(this);\r\n        this.enterDeckDetialViewAllCards= this.enterDeckDetialViewAllCards.bind(this);\r\n        this.editDeckName = this.editDeckName.bind(this);\r\n        this.updateDecks = this.updateDecks.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.inGuestMode === false){\r\n            requestFlashcards().then(response => {\r\n                this.setState({\r\n                    flashcards: response.flashcards,\r\n                    decks: this.getDeckNames(response.flashcards)\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    getDeckNames(flashcards){\r\n        let deckNames = [...new Set(flashcards.map(card => card.cardDeck))];\r\n        let decks = [];\r\n        deckNames.forEach(deckName => {\r\n            let numberOfCardsInDeck = flashcards.filter(card => card.cardDeck === deckName).length;\r\n            decks.push({deckName: deckName, count: numberOfCardsInDeck});\r\n        });\r\n        return decks;\r\n    }\r\n\r\n    editDeckName(currentName, newName){\r\n        let editedFlashcards = this.state.flashcards.map(card =>{\r\n            if (card.cardDeck === currentName){\r\n                card.cardDeck = newName;\r\n            }\r\n            return card;\r\n        })\r\n        this.setState({flashcards: editedFlashcards, decks:this.getDeckNames(editedFlashcards)})\r\n    }\r\n    removeFlashcard(removedCard){\r\n        let filteredFlashcards = this.state.flashcards.filter(card => !card._id.match(removedCard._id));\r\n        this.setState({\r\n            flashcards: filteredFlashcards,\r\n            decks: this.getDeckNames(filteredFlashcards)\r\n        }, () =>{\r\n            if(this.state.deckSelected){\r\n                // Update DeckDetailView\r\n                if(this.state.allCardsSelected){\r\n                    this.setState({selectedCards: this.state.flashcards})\r\n                }\r\n                else{\r\n                    this.selectDeck(removedCard.cardDeck)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    editFlashcard(cardId, card){\r\n        let allCards = this.state.flashcards.slice();\r\n        let AllCardsindex = allCards.findIndex(card => card._id.match(cardId));\r\n        allCards[AllCardsindex] = card\r\n        let selectedCards = this.state.selectedCards.slice();\r\n        let selectedCardsIndex = selectedCards.findIndex(card => card._id.match(cardId));\r\n        selectedCards[selectedCardsIndex] = card\r\n        this.setState({flashcards: allCards, selectedCards: selectedCards, decks:this.getDeckNames(allCards)})\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ [event.target.name]: event.target.value });\r\n    }\r\n\r\n    addFlashcard(card){\r\n        this.setState(prevState => ({\r\n            flashcards: [...prevState.flashcards, card],\r\n            decks: this.getDeckNames([...prevState.flashcards, card]),\r\n        }), () =>{\r\n            if(this.state.deckSelected){\r\n                // Update DeckDetailView\r\n                if(this.state.allCardsSelected){\r\n                    this.setState({selectedCards: this.state.flashcards})\r\n                }\r\n                else{\r\n                    this.selectDeck(card.cardDeck)\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n    createFlashcard(cardFront, cardBack, cardDeck){\r\n        if(this.props.inGuestMode === false){\r\n            requestCreateFlashcard(cardFront,cardBack,cardDeck).then(response => \r\n                this.addFlashcard(response));\r\n        }\r\n        else{\r\n            this.addFlashcard({\r\n                _id: String((Date.now() + Math.random())), // likely a unique id\r\n                cardFront: cardFront,\r\n                cardBack: cardBack,\r\n                cardDeck: cardDeck,\r\n                dateCreated: Date.now()\r\n            });\r\n        }\r\n    }   \r\n    updateCardDeck(value){\r\n        this.setState({cardDeck:value})\r\n    }\r\n    updateSelectionInProgress(bool){\r\n        this.setState({selectionInProgress :bool})\r\n    }\r\n    playDeck(deck = \"\"){\r\n        if(deck.length > 0){\r\n            this.selectDeck(deck)\r\n        }\r\n        this.setState({playMode: true})\r\n    }\r\n    enterDeckDetailView(deck){\r\n        this.selectDeck(deck)\r\n        this.setState({inDeckDetailView: true})\r\n    }\r\n    enterDeckDetialViewAllCards(){\r\n        if(this.state.flashcards.length.length < 1){\r\n            return;\r\n        }\r\n        this.setState({\r\n            selectedCards: this.state.flashcards, \r\n            inDeckDetailView: true, \r\n            deckSelected: true,\r\n            allCardsSelected: true});\r\n        this.props.showBackButton();\r\n    }\r\n    playAllCards(){\r\n        if(this.state.flashcards.length.length < 1){\r\n            return;\r\n        }\r\n        this.setState({deckSelected: true, selectedCards: this.state.flashcards, playMode: true})\r\n        this.props.showBackButton();\r\n    }\r\n    selectDeck(deck){\r\n        this.setState({\r\n            deckSelected: true, \r\n            selectedCards: this.state.flashcards.filter(card => card.cardDeck === deck)})\r\n        this.props.showBackButton();\r\n    }\r\n    exitDeckDetailView(){\r\n        this.setState({deckSelected: false, selectedCards: [], allCardsSelected: false, inDeckDetailView:false})\r\n        this.props.hideBackButton();\r\n    }\r\n    exitPlayView(){\r\n        if(this.state.inDeckDetailView){\r\n            this.setState({playMode: false})\r\n        }\r\n        else{\r\n            this.setState({deckSelected: false, selectedCards: [], playMode: false})\r\n            this.props.hideBackButton();\r\n        }\r\n    }\r\n\r\n    updateDecks(decks){\r\n        this.setState({decks:decks})\r\n    }   \r\n    \r\n\r\n    render(){\r\n        if(this.state.playMode){\r\n            return(\r\n                <PlayView\r\n                    cards={this.state.selectedCards}\r\n                    exitView={this.exitPlayView}/>\r\n            )\r\n        }\r\n        if(this.state.deckSelected){\r\n            return(\r\n                <DeckDetailView\r\n                    cards={this.state.selectedCards}\r\n                    removeFlashcard = {this.removeFlashcard}\r\n                    editFlashcard={this.editFlashcard}\r\n                    createFlashcard={this.createFlashcard}\r\n                    decks={this.state.decks}\r\n                    exitView={this.exitDeckDetailView}\r\n                    playDeck={this.playDeck}\r\n                    editDeckName={this.editDeckName}\r\n                    isDisplayingAllDecks={this.state.allCardsSelected}\r\n                    inGuestMode={this.props.inGuestMode}\r\n                />\r\n            )\r\n        }\r\n        else{   \r\n            return(\r\n                <DeckList\r\n                    decks={this.state.decks}\r\n                    createFlashcard={this.createFlashcard}\r\n                    updateDecks={this.updateDecks}\r\n                    playAllCards={this.playAllCards}\r\n                    enterDeckDetialViewAllCards={this.enterDeckDetialViewAllCards}\r\n                    enterDeckDetailView={this.enterDeckDetailView}\r\n                    playDeck={this.playDeck}/>\r\n            )\r\n        }\r\n\r\n      }\r\n}\r\n\r\nexport default FlashcardMenu;","import './Styles/App.css';\r\nimport './Styles/Styles.css';\r\nimport React, {Component} from 'react'\r\nimport EntranceForm from './EntranceForm';\r\nimport FlashcardMenu from './FlashcardMenu';\r\nimport { requestUser } from './serverFetches';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      loading: true,\r\n      loggedIn: false,\r\n      guestMode: false,\r\n      displayBackButton: false,\r\n    };\r\n    this.setLoginStatus = this.setLoginStatus.bind(this);\r\n    this.setGuestStatus = this.setGuestStatus.bind(this);\r\n    this.showBackButton = this.showBackButton.bind(this);\r\n    this.hideBackButton = this.hideBackButton.bind(this);\r\n    this.getBody = this.getBody.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    requestUser().then(state  => {\r\n        this.setState(state)\r\n        this.setState({loading:false})\r\n      });\r\n  }\r\n\r\n  setLoginStatus(bool){\r\n    this.setState({loggedIn: bool})\r\n  }\r\n  setGuestStatus(bool){\r\n    this.setState({guestMode: bool})\r\n  }\r\n  showBackButton(){\r\n    this.setState({displayBackButton: true})\r\n  }\r\n  hideBackButton(){\r\n    this.setState({displayBackButton: false})\r\n  }\r\n  historyBack(){\r\n    window.history.back()\r\n  }\r\n  getBody(){\r\n    if(this.state.loggedIn || this.state.guestMode){\r\n      return  <FlashcardMenu \r\n                hideBackButton={this.hideBackButton} \r\n                showBackButton={this.showBackButton}\r\n                inGuestMode={this.state.guestMode}\r\n              />\r\n    }\r\n    else{\r\n      return <EntranceForm \r\n                setLoginStatus={this.setLoginStatus}\r\n                setGuestStatus={this.setGuestStatus}\r\n              />; \r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\"> \r\n        <div className=\"header\">\r\n          <div>\r\n            <i onClick={this.historyBack} className={this.state.displayBackButton ? \"fas fa-arrow-left\" : \"fas fa-arrow-left invisibile\"}></i>\r\n            <span>Flashcard App</span></div>\r\n          <div>\r\n            <span>{this.state.loggedIn ? \"You are logged in\" : \"You are not logged in\"}</span>\r\n          </div>\r\n        </div>\r\n        {this.getBody()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Styles/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}